name: Convert Issues to Posts

on:
  issues:
    types: [labeled,edited]
  workflow_dispatch:

jobs:
  convert-issues:
    runs-on: ubuntu-latest
    if: github.event.issue.labels != null && join(github.event.issue.labels.*.name) != ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Convert issue to markdown
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_CREATED_AT: ${{ github.event.issue.created_at }}
          ISSUE_UPDATED_AT: ${{ github.event.issue.updated_at }}
          ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        run: |
          python -c "
          import os
          import re
          import json
          from datetime import datetime
          from github import Github

          # 获取环境变量
          token = os.environ['GITHUB_TOKEN']
          issue_number = int(os.environ['ISSUE_NUMBER'])
          issue_title = os.environ['ISSUE_TITLE']
          issue_body = os.environ['ISSUE_BODY']
          issue_created_at = os.environ['ISSUE_CREATED_AT']
          repo_name = os.environ['GITHUB_REPOSITORY']

          # 连接到GitHub API
          g = Github(token)
          repo = g.get_repo(repo_name)
          issue = repo.get_issue(issue_number)

          # 获取issue的所有标签
          labels = [label.name for label in issue.labels]
          
          # 如果没有标签，跳过处理
          if not labels:
              print('Issue does not have any labels, skipping')
              exit(0)

          # 格式化日期时间
          created_date = datetime.strptime(issue_created_at, '%Y-%m-%dT%H:%M:%SZ')
          formatted_date = created_date.strftime('%Y-%m-%dT%H:%M:%S+08:00')

          # 创建文件名（使用issue标题的slug）
          slug = re.sub(r'[^a-zA-Z0-9\u4e00-\u9fa5]+', '-', issue_title.lower()).strip('-')
          filename = f'content/posts/issue-{issue_number}-{slug}.md'

          # 将标签格式化为TOML数组格式
          tags_str = json.dumps(labels, ensure_ascii=False)
          
          # 创建Front Matter
          front_matter = f'''+++
          date = \'{formatted_date}\'
          draft = false
          title = \'{issue_title}\'
          author = \"{issue.user.login}\"
          tags = {tags_str}
          +++

          {issue_body}
          '''

          # 写入文件
          os.makedirs('content/posts', exist_ok=True)
          with open(filename, 'w', encoding='utf-8') as f:
              f.write(front_matter)

          print(f'Created markdown file: {filename}')
          "

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add content/posts/
          git commit -m "Convert issue #${{ github.event.issue.number }} to post" || echo "No changes to commit"
          git push 
